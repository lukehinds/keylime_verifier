package main

import (
	"github.com/gorilla/mux"
	"log"
	//"encoding/json"
	"fmt"
	"net/http"
	"keylime_verifier/app"
)

/*This method handles the GET requests to retrieve status on agents from the Cloud Verifier.
Currently, only agents resources are available for GETing, i.e. /agents. All other GET uri's
will return errors. Agents requests require a single agent_id parameter which identifies the
agent to be returned. If the agent_id is not found, a 404 response is returned.  If the agent_id
was not found, it either completed successfully, or failed.  If found, the agent_id is still polling
to contact the Cloud Agent.*/
func get(w http.ResponseWriter, r *http.Request) {
	myurl := r.URL.RequestURI()
	//fmt.Println(myurl)
	rest_params := cloud_verifier_common.GetRestfulParams(myurl)
	fmt.Println(rest_params)
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`{"message": "get called"}`))
	// w.Write([]byte(rest_params))
}

func post(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	w.Write([]byte(`{"message": "post called"}`))
}

func put(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusAccepted)
	w.Write([]byte(`{"message": "put called"}`))
}

func delete(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte(`{"message": "delete called"}`))
}

func notFound(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusNotFound)
	w.Write([]byte(`{"message": "not found"}`))
}

func main() {
	router := mux.NewRouter()
	//router.HandleFunc("/(?:v[0-9]/)?agents/.*", get).Methods(http.MethodGet)
	router.HandleFunc("/agents", get).Methods(http.MethodGet)
	router.HandleFunc("/", post).Methods(http.MethodPost)
	router.HandleFunc("/", put).Methods(http.MethodPut)
	router.HandleFunc("/", delete).Methods(http.MethodDelete)
	router.HandleFunc("/", notFound)
	log.Fatal(http.ListenAndServe(":8888", router))
}
